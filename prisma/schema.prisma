// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Appears that the relations need to be optional https://stackoverflow.com/questions/73000266/prisma-not-deleting-because-it-depends-on-nonexistent-record

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["orderByNulls"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int    @id @default(autoincrement())
  name  String
  telegramId Int? @unique
  telegramUserName String
  telegramDpUrl String? // saves the url to the telegram display pic
  userOrg UserOnOrg[]
  bookings Booking[]
  deleted Boolean @default(false) // supports soft delete
}

enum IGCategory {
  Sports
  SocioCultural
  Others
  Guips
}

model Organisation {
  id        Int     @id @default(autoincrement())
  name     String
  description String @default("A NUSC organisation")
  isAdminOrg Boolean @default(false)
  userOrg UserOnOrg[]
  inviteLink String
  slug String @unique
  category IGCategory
  isInactive Boolean @default(false)
  isInvisible Boolean @default(false) // is not displayed on the website
}

model UserOnOrg {
  user       User     @relation(fields: [userId], references: [id])
  userId     Int // relation scalar field (used in the `@relation` attribute above)
  org   Organisation @relation(fields: [orgId], references: [id])
  orgId Int // relation scalar field (used in the `@relation` attribute above)
  assignedAt DateTime @default(now())
  bookings Booking[]
  isIGHead Boolean @default(false)
  @@id([userId, orgId])
  deleted Boolean @default(false) // supports soft delete
}

model Venue {
  id    Int    @id @default(autoincrement())
  name  String
  booking Booking[]
}

model Booking {
  id Int @id@default(autoincrement())
  eventName String
  venue Venue @relation(fields: [venueId], references: [id])
  //todo remove venueId, we already have the venue
  venueId Int
  bookedBy UserOnOrg @relation(fields: [userId, orgId], references: [userId, orgId])
  //todo remove the following 3 fields, is useless if we already have the userOnOrg
  bookedByUser User @relation(fields: [userId], references: [id])
  userId Int
  orgId Int
  start DateTime // start time of booking
  end DateTime // end time of booking
  bookedAt DateTime @default(now())
}
